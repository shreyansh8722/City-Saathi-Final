import { clsx } from "clsx"
import { twMerge } from "tailwind-merge"

// Your existing cn function - NO CHANGES HERE
export function cn(...inputs) {
  return twMerge(clsx(inputs))
}

// --- ADD THE NEW FUNCTION BELOW ---

/**
 * Constructs the URL for a resized image generated by the Firebase Resize Images extension.
 * Assumes the extension is configured to output WebP format with a '_WIDTHxHEIGHT.webp' suffix
 * in the same folder as the original.
 *
 * @param {string | undefined | null} originalUrl The original image URL from Firestore.
 * @param {string} size The desired size string (e.g., "280x400", "800x800").
 * @param {string} fallbackUrl Optional fallback image URL.
 * @returns {string} The URL of the resized image or a fallback.
 */
export const getResizedImageUrl = (originalUrl, size, fallbackUrl = "https://placehold.co/400x300?text=No+Image") => {
  if (!originalUrl || typeof originalUrl !== 'string') {
    // Adjust placeholder size if possible, otherwise use default
    const placeholderSize = size || '400x300';
    return fallbackUrl.replace('400x300', placeholderSize);
  }

  try {
    // 1. Decode URL to handle spaces or special characters in filenames
    const decodedUrl = decodeURIComponent(originalUrl);

    // 2. Find the end of the path before query parameters ('?')
    const queryIndex = decodedUrl.indexOf('?');
    const pathWithoutQuery = queryIndex !== -1 ? decodedUrl.substring(0, queryIndex) : decodedUrl;

    // 3. Find the last '.' to identify the extension
    const lastDotIndex = pathWithoutQuery.lastIndexOf('.');
    if (lastDotIndex === -1) {
      console.warn("Could not determine file extension for resizing:", originalUrl);
      return originalUrl; // Return original if no extension found
    }

    const basePath = pathWithoutQuery.substring(0, lastDotIndex);
    // const originalExtension = pathWithoutQuery.substring(lastDotIndex); // We assume .webp output

    // 4. Get query parameters (like Firebase Storage token)
    const queryParams = queryIndex !== -1 ? decodedUrl.substring(queryIndex) : "";

    // 5. Construct the resized URL
    // --- !!! VERIFY THIS FORMAT !!! ---
    // Check your Firebase Storage bucket for an image uploaded *after* installing
    // the extension. Does it look like '.../image_280x400.webp'?
    // Adjust the suffix and extension (.webp) if needed.
    const resizedUrl = `${basePath}_${size}.webp${queryParams}`;
    // --- End Verification ---

    return resizedUrl;

  } catch (error) {
    console.error("Error creating resized image URL:", error, originalUrl);
    return originalUrl; // Fallback to original on error
  }
};
